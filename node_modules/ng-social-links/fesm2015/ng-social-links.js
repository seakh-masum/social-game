import { InjectionToken, ɵɵdefineInjectable, ɵɵinject, Injectable, Inject, NgModule } from '@angular/core';
import { DOCUMENT } from '@angular/common';

const DEFAULT_SHARE_URL_CONFIG_TOKEN = new InjectionToken('ng-default-social-share-config');

class Providers {
}
Providers.facebook = 'fb';
Providers.twitter = 'tw';
Providers.linkedin = 'in';
Providers.mailto = 'mail';
Providers.vkontakte = 'vk';
Providers.telegram = 'tg';
Providers.getpocket = 'pocket';
Providers.reddit = 're';
Providers.evernote = 'ev';
Providers.pinterest = 'pi';
Providers.skype = 'sk';
Providers.whatsapp = 'wa';
Providers.connectOk = 'ok';
Providers.xing = 'xi';
class ProfilerUrls {
}
ProfilerUrls.facebook = 'https://www.facebook.com/sharer/sharer.php';
ProfilerUrls.twitter = 'https://twitter.com/intent/tweet';
ProfilerUrls.linkedin = 'https://www.linkedin.com/sharing/share-offsite/';
ProfilerUrls.mailto = 'mailto:';
ProfilerUrls.vkontakte = 'https://vk.com/share.php';
ProfilerUrls.telegram = 'https://t.me/share/url';
ProfilerUrls.getpocket = 'https://getpocket.com/edit';
ProfilerUrls.reddit = 'https://reddit.com/submit/';
ProfilerUrls.evernote = 'https://www.evernote.com/clip.action';
ProfilerUrls.pinterest = 'https://pinterest.com/pin/create/button/';
ProfilerUrls.skype = 'https://web.skype.com/share';
ProfilerUrls.whatsapp = 'whatsapp://send';
ProfilerUrls.connectOk = 'https://connect.ok.ru/dk';
ProfilerUrls.xing = 'https://www.xing.com/app/user';

/**
 * Provides social share URL for a given provider.
 * @param provider Provider name.
 * @param config Parameters used to build a social share URL.
 */
function getShareLink(provider, config) {
    let { url, title, description } = config;
    if (!url) {
        throw new Error('Mandatory parameter is missing: url.');
    }
    url = encodeURIComponent(url);
    if (title) {
        title = encodeURIComponent(title);
    }
    if (description) {
        description = encodeURIComponent(description);
    }
    switch (provider) {
        case Providers.facebook:
            return `${ProfilerUrls.facebook}?u=${url}`;
        case Providers.twitter:
            return `${ProfilerUrls.twitter}?url=${url}` + (title ? `&text=${title}` : '');
        case Providers.linkedin:
            return `${ProfilerUrls.linkedin}?url=${url}` + (title ? '/&summary=' + title : '');
        case Providers.vkontakte:
            return `${ProfilerUrls.vkontakte}?url=${url}` + (title ? `&title=${title}` : '');
        case Providers.telegram:
            return `${ProfilerUrls.telegram}?url=${url}` + (title ? `&text=${title}` : '');
        case Providers.getpocket:
            return `${ProfilerUrls.getpocket}?url=${url}` + (title ? `&title=${title}` : '');
        case Providers.reddit:
            return `${ProfilerUrls.reddit}?url=${url}`;
        case Providers.evernote:
            return `${ProfilerUrls.evernote}?url=${url}` + (title ? `&t=${title}` : '');
        case Providers.pinterest:
            return `${ProfilerUrls.pinterest}?url=${url}&media=${url}` +
                (title ? `&description=${title}` : '');
        case Providers.skype:
            return `${ProfilerUrls.skype}?url=${url}&source=button` + (title ? `&text=${title}` : '');
        case Providers.whatsapp:
            return `${ProfilerUrls.whatsapp}?text=${url}` + encodeURIComponent(' ') + (title || '');
        case Providers.connectOk:
            const shareUrlParam = 'st.cmd=WidgetSharePreview&service=odnoklassniki&st.shareUrl';
            return `${ProfilerUrls.connectOk}?${shareUrlParam}=${url}`;
        case Providers.xing:
            return `${ProfilerUrls.xing}?op=share;url=${url}` + (title ? `;title=${title}` : '');
        case Providers.mailto:
            return (ProfilerUrls.mailto +
                (title ? '?subject=' + title : '') +
                (title ? '&body=' : '?body=') +
                (description ? description : '') +
                ' ' +
                url);
        default:
            throw new Error(`Unknown social share provider: ${provider}`);
    }
}

class NgSocialLinksService {
    constructor(document, defaultConfig) {
        this.document = document;
        this.defaultConfig = defaultConfig;
    }
    getShareLink(provider, config) {
        const url = (config === null || config === void 0 ? void 0 : config.url) || this.defaultConfig.url || this.document.location.origin;
        const title = (config === null || config === void 0 ? void 0 : config.title) || this.defaultConfig.title;
        const description = (config === null || config === void 0 ? void 0 : config.description) || this.defaultConfig.description;
        return getShareLink(provider, { url, title, description });
    }
}
NgSocialLinksService.ɵprov = ɵɵdefineInjectable({ factory: function NgSocialLinksService_Factory() { return new NgSocialLinksService(ɵɵinject(DOCUMENT), ɵɵinject(DEFAULT_SHARE_URL_CONFIG_TOKEN)); }, token: NgSocialLinksService, providedIn: "root" });
NgSocialLinksService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
NgSocialLinksService.ctorParameters = () => [
    { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [DEFAULT_SHARE_URL_CONFIG_TOKEN,] }] }
];

class NgSocialLinksModule {
    static forRoot(config) {
        return {
            ngModule: NgSocialLinksModule,
            providers: [
                NgSocialLinksService,
                { provide: DEFAULT_SHARE_URL_CONFIG_TOKEN, useValue: config || {} }
            ]
        };
    }
}
NgSocialLinksModule.decorators = [
    { type: NgModule }
];

/*
 * Public API Surface of ng-social-links
 */

/**
 * Generated bundle index. Do not edit.
 */

export { NgSocialLinksModule, NgSocialLinksService, DEFAULT_SHARE_URL_CONFIG_TOKEN as ɵa };
//# sourceMappingURL=ng-social-links.js.map
