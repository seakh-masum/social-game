import { Injectable, Inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { DEFAULT_SHARE_URL_CONFIG_TOKEN } from './ng-social-links.tokens';
import * as utils from './ng-social-links.utils';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "./ng-social-links.tokens";
export class NgSocialLinksService {
    constructor(document, defaultConfig) {
        this.document = document;
        this.defaultConfig = defaultConfig;
    }
    getShareLink(provider, config) {
        const url = (config === null || config === void 0 ? void 0 : config.url) || this.defaultConfig.url || this.document.location.origin;
        const title = (config === null || config === void 0 ? void 0 : config.title) || this.defaultConfig.title;
        const description = (config === null || config === void 0 ? void 0 : config.description) || this.defaultConfig.description;
        return utils.getShareLink(provider, { url, title, description });
    }
}
NgSocialLinksService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgSocialLinksService_Factory() { return new NgSocialLinksService(i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(i2.DEFAULT_SHARE_URL_CONFIG_TOKEN)); }, token: NgSocialLinksService, providedIn: "root" });
NgSocialLinksService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
NgSocialLinksService.ctorParameters = () => [
    { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [DEFAULT_SHARE_URL_CONFIG_TOKEN,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctc29jaWFsLWxpbmtzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiL2hvbWUvZGVhZGZyZWVkL3Byb2plY3RzL25nLXNvY2lhbC1saW5rcy9wcm9qZWN0cy9uZy1zb2NpYWwtbGlua3Mvc3JjLyIsInNvdXJjZXMiOlsibGliL25nLXNvY2lhbC1saW5rcy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUzQyxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQU0xRSxPQUFPLEtBQUssS0FBSyxNQUFNLHlCQUF5QixDQUFDOzs7O0FBS2pELE1BQU0sT0FBTyxvQkFBb0I7SUFDL0IsWUFDNEIsUUFBa0IsRUFDSSxhQUFxQjtRQUQzQyxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ0ksa0JBQWEsR0FBYixhQUFhLENBQVE7SUFDcEUsQ0FBQztJQThCSixZQUFZLENBQUMsUUFBK0IsRUFBRSxNQUF3QjtRQUNwRSxNQUFNLEdBQUcsR0FBRyxDQUFBLE1BQU0sYUFBTixNQUFNLHVCQUFOLE1BQU0sQ0FBRSxHQUFHLEtBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO1FBQ25GLE1BQU0sS0FBSyxHQUFHLENBQUEsTUFBTSxhQUFOLE1BQU0sdUJBQU4sTUFBTSxDQUFFLEtBQUssS0FBSSxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQztRQUN4RCxNQUFNLFdBQVcsR0FBRyxDQUFBLE1BQU0sYUFBTixNQUFNLHVCQUFOLE1BQU0sQ0FBRSxXQUFXLEtBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUM7UUFFMUUsT0FBTyxLQUFLLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQztJQUNuRSxDQUFDOzs7O1lBM0NGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7O1lBR3VDLFFBQVEsdUJBQTNDLE1BQU0sU0FBQyxRQUFROzRDQUNmLE1BQU0sU0FBQyw4QkFBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuaW1wb3J0IHsgREVGQVVMVF9TSEFSRV9VUkxfQ09ORklHX1RPS0VOIH0gZnJvbSAnLi9uZy1zb2NpYWwtbGlua3MudG9rZW5zJztcbmltcG9ydCB7XG4gIE5nU29jaWFsTGlua3NQcm92aWRlcixcbiAgTmdTb2NpYWxMaW5rc1Byb3ZpZGVyQ29uZmlnIGFzIENvbmZpZ1xufSBmcm9tICcuLy4vbmctc29jaWFsLWxpbmtzLnR5cGVzJztcbmltcG9ydCB7IFByb3ZpZGVycyB9IGZyb20gJy4vbmctc29jaWFsLWxpbmtzLmNvbnN0YW50cyc7XG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuL25nLXNvY2lhbC1saW5rcy51dGlscyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIE5nU29jaWFsTGlua3NTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBkb2N1bWVudDogRG9jdW1lbnQsXG4gICAgQEluamVjdChERUZBVUxUX1NIQVJFX1VSTF9DT05GSUdfVE9LRU4pIHByaXZhdGUgZGVmYXVsdENvbmZpZzogQ29uZmlnXG4gICkge31cblxuICAvKipcbiAgICogUHJvdmlkZXMgc29jaWFsIHNoYXJlIFVSTCBmb3IgYSBnaXZlbiBwcm92aWRlci5cbiAgICogQWRkaW9uYWwgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXJzIGRlcGVuZCBvbiBhIGNob3NlbiBwcm92aWRlci5cbiAgICogQHBhcmFtIHByb3ZpZGVyIFByb3ZpZGVyIG5hbWUuXG4gICAqIEBwYXJhbSBjb25maWcgUGFyYW1ldGVycyB1c2VkIHRvIGJ1aWxkIGEgc29jaWFsIHNoYXJlIFVSTC5cbiAgICovXG4gIGdldFNoYXJlTGluayhcbiAgICBwcm92aWRlcjpcbiAgICAgIHR5cGVvZiBQcm92aWRlcnMuZmFjZWJvb2sgIHxcbiAgICAgIHR5cGVvZiBQcm92aWRlcnMucmVkZGl0ICAgIHxcbiAgICAgIHR5cGVvZiBQcm92aWRlcnMuY29ubmVjdE9rLFxuICAgIGNvbmZpZz86IFBpY2s8Q29uZmlnLCAndXJsJz5cbiAgKTogc3RyaW5nO1xuICBnZXRTaGFyZUxpbmsoXG4gICAgcHJvdmlkZXI6XG4gICAgICB0eXBlb2YgUHJvdmlkZXJzLnR3aXR0ZXIgICB8XG4gICAgICB0eXBlb2YgUHJvdmlkZXJzLmxpbmtlZGluICB8XG4gICAgICB0eXBlb2YgUHJvdmlkZXJzLnZrb250YWt0ZSB8XG4gICAgICB0eXBlb2YgUHJvdmlkZXJzLnRlbGVncmFtICB8XG4gICAgICB0eXBlb2YgUHJvdmlkZXJzLmdldHBvY2tldCB8XG4gICAgICB0eXBlb2YgUHJvdmlkZXJzLmV2ZXJub3RlICB8XG4gICAgICB0eXBlb2YgUHJvdmlkZXJzLnBpbnRlcmVzdCB8XG4gICAgICB0eXBlb2YgUHJvdmlkZXJzLnNreXBlICAgICB8XG4gICAgICB0eXBlb2YgUHJvdmlkZXJzLndoYXRzYXBwICB8XG4gICAgICB0eXBlb2YgUHJvdmlkZXJzLnhpbmcsXG4gICAgY29uZmlnPzogUGljazxDb25maWcsICd1cmwnIHwgJ3RpdGxlJz5cbiAgKTogc3RyaW5nO1xuICBnZXRTaGFyZUxpbmsocHJvdmlkZXI6IHR5cGVvZiBQcm92aWRlcnMubWFpbHRvLCBjb25maWc/OiBDb25maWcpOiBzdHJpbmc7XG4gIGdldFNoYXJlTGluayhwcm92aWRlcjogTmdTb2NpYWxMaW5rc1Byb3ZpZGVyLCBjb25maWc/OiBQYXJ0aWFsPENvbmZpZz4pOiBzdHJpbmcge1xuICAgIGNvbnN0IHVybCA9IGNvbmZpZz8udXJsIHx8IHRoaXMuZGVmYXVsdENvbmZpZy51cmwgfHwgdGhpcy5kb2N1bWVudC5sb2NhdGlvbi5vcmlnaW47XG4gICAgY29uc3QgdGl0bGUgPSBjb25maWc/LnRpdGxlIHx8IHRoaXMuZGVmYXVsdENvbmZpZy50aXRsZTtcbiAgICBjb25zdCBkZXNjcmlwdGlvbiA9IGNvbmZpZz8uZGVzY3JpcHRpb24gfHwgdGhpcy5kZWZhdWx0Q29uZmlnLmRlc2NyaXB0aW9uO1xuXG4gICAgcmV0dXJuIHV0aWxzLmdldFNoYXJlTGluayhwcm92aWRlciwgeyB1cmwsIHRpdGxlLCBkZXNjcmlwdGlvbiB9KTtcbiAgfVxufVxuIl19