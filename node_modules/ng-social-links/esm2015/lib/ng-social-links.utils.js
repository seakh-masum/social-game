import { Providers, ProfilerUrls } from './ng-social-links.constants';
/**
 * Provides social share URL for a given provider.
 * @param provider Provider name.
 * @param config Parameters used to build a social share URL.
 */
export function getShareLink(provider, config) {
    let { url, title, description } = config;
    if (!url) {
        throw new Error('Mandatory parameter is missing: url.');
    }
    url = encodeURIComponent(url);
    if (title) {
        title = encodeURIComponent(title);
    }
    if (description) {
        description = encodeURIComponent(description);
    }
    switch (provider) {
        case Providers.facebook:
            return `${ProfilerUrls.facebook}?u=${url}`;
        case Providers.twitter:
            return `${ProfilerUrls.twitter}?url=${url}` + (title ? `&text=${title}` : '');
        case Providers.linkedin:
            return `${ProfilerUrls.linkedin}?url=${url}` + (title ? '/&summary=' + title : '');
        case Providers.vkontakte:
            return `${ProfilerUrls.vkontakte}?url=${url}` + (title ? `&title=${title}` : '');
        case Providers.telegram:
            return `${ProfilerUrls.telegram}?url=${url}` + (title ? `&text=${title}` : '');
        case Providers.getpocket:
            return `${ProfilerUrls.getpocket}?url=${url}` + (title ? `&title=${title}` : '');
        case Providers.reddit:
            return `${ProfilerUrls.reddit}?url=${url}`;
        case Providers.evernote:
            return `${ProfilerUrls.evernote}?url=${url}` + (title ? `&t=${title}` : '');
        case Providers.pinterest:
            return `${ProfilerUrls.pinterest}?url=${url}&media=${url}` +
                (title ? `&description=${title}` : '');
        case Providers.skype:
            return `${ProfilerUrls.skype}?url=${url}&source=button` + (title ? `&text=${title}` : '');
        case Providers.whatsapp:
            return `${ProfilerUrls.whatsapp}?text=${url}` + encodeURIComponent(' ') + (title || '');
        case Providers.connectOk:
            const shareUrlParam = 'st.cmd=WidgetSharePreview&service=odnoklassniki&st.shareUrl';
            return `${ProfilerUrls.connectOk}?${shareUrlParam}=${url}`;
        case Providers.xing:
            return `${ProfilerUrls.xing}?op=share;url=${url}` + (title ? `;title=${title}` : '');
        case Providers.mailto:
            return (ProfilerUrls.mailto +
                (title ? '?subject=' + title : '') +
                (title ? '&body=' : '?body=') +
                (description ? description : '') +
                ' ' +
                url);
        default:
            throw new Error(`Unknown social share provider: ${provider}`);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctc29jaWFsLWxpbmtzLnV0aWxzLmpzIiwic291cmNlUm9vdCI6Ii9ob21lL2RlYWRmcmVlZC9wcm9qZWN0cy9uZy1zb2NpYWwtbGlua3MvcHJvamVjdHMvbmctc29jaWFsLWxpbmtzL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9uZy1zb2NpYWwtbGlua3MudXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBSUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUV0RTs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLFlBQVksQ0FBQyxRQUErQixFQUFFLE1BQXVCO0lBQ25GLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxHQUFHLE1BQU0sQ0FBQztJQUV6QyxJQUFJLENBQUMsR0FBRyxFQUFFO1FBQ1IsTUFBTSxJQUFJLEtBQUssQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDO0tBQ3pEO0lBRUQsR0FBRyxHQUFHLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRTlCLElBQUksS0FBSyxFQUFFO1FBQ1QsS0FBSyxHQUFHLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ25DO0lBRUQsSUFBSSxXQUFXLEVBQUU7UUFDZixXQUFXLEdBQUcsa0JBQWtCLENBQUMsV0FBVyxDQUFDLENBQUM7S0FDL0M7SUFFRCxRQUFRLFFBQVEsRUFBRTtRQUNoQixLQUFLLFNBQVMsQ0FBQyxRQUFRO1lBQ3JCLE9BQU8sR0FBRyxZQUFZLENBQUMsUUFBUSxNQUFNLEdBQUcsRUFBRSxDQUFDO1FBRTdDLEtBQUssU0FBUyxDQUFDLE9BQU87WUFDcEIsT0FBTyxHQUFHLFlBQVksQ0FBQyxPQUFPLFFBQVEsR0FBRyxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFNBQVMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRWhGLEtBQUssU0FBUyxDQUFDLFFBQVE7WUFDckIsT0FB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LENBQUMsa0NBQWtDLFFBQVEsRUFBRSxDQUFDLENBQUM7S0FDakU7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgTmdTb2NpYWxMaW5rc1Byb3ZpZGVyLFxuICBOZ1NvY2lhbExpbmtzUHJvdmlkZXJDb25maWcgYXMgQ29uZmlnXG59IGZyb20gJy4vLi9uZy1zb2NpYWwtbGlua3MudHlwZXMnO1xuaW1wb3J0IHsgUHJvdmlkZXJzLCBQcm9maWxlclVybHMgfSBmcm9tICcuL25nLXNvY2lhbC1saW5rcy5jb25zdGFudHMnO1xuXG4vKipcbiAqIFByb3ZpZGVzIHNvY2lhbCBzaGFyZSBVUkwgZm9yIGEgZ2l2ZW4gcHJvdmlkZXIuXG4gKiBAcGFyYW0gcHJvdmlkZXIgUHJvdmlkZXIgbmFtZS5cbiAqIEBwYXJhbSBjb25maWcgUGFyYW1ldGVycyB1c2VkIHRvIGJ1aWxkIGEgc29jaWFsIHNoYXJlIFVSTC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFNoYXJlTGluayhwcm92aWRlcjogTmdTb2NpYWxMaW5rc1Byb3ZpZGVyLCBjb25maWc6IFBhcnRpYWw8Q29uZmlnPik6IHN0cmluZyB7XG4gIGxldCB7IHVybCwgdGl0bGUsIGRlc2NyaXB0aW9uIH0gPSBjb25maWc7XG5cbiAgaWYgKCF1cmwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ01hbmRhdG9yeSBwYXJhbWV0ZXIgaXMgbWlzc2luZzogdXJsLicpO1xuICB9XG5cbiAgdXJsID0gZW5jb2RlVVJJQ29tcG9uZW50KHVybCk7XG5cbiAgaWYgKHRpdGxlKSB7XG4gICAgdGl0bGUgPSBlbmNvZGVVUklDb21wb25lbnQodGl0bGUpO1xuICB9XG5cbiAgaWYgKGRlc2NyaXB0aW9uKSB7XG4gICAgZGVzY3JpcHRpb24gPSBlbmNvZGVVUklDb21wb25lbnQoZGVzY3JpcHRpb24pO1xuICB9XG5cbiAgc3dpdGNoIChwcm92aWRlcikge1xuICAgIGNhc2UgUHJvdmlkZXJzLmZhY2Vib29rOlxuICAgICAgcmV0dXJuIGAke1Byb2ZpbGVyVXJscy5mYWNlYm9va30/dT0ke3VybH1gO1xuXG4gICAgY2FzZSBQcm92aWRlcnMudHdpdHRlcjpcbiAgICAgIHJldHVybiBgJHtQcm9maWxlclVybHMudHdpdHRlcn0/dXJsPSR7dXJsfWAgKyAodGl0bGUgPyBgJnRleHQ9JHt0aXRsZX1gIDogJycpO1xuXG4gICAgY2FzZSBQcm92aWRlcnMubGlua2VkaW46XG4gICAgICByZXR1cm4gYCR7UHJvZmlsZXJVcmxzLmxpbmtlZGlufT91cmw9JHt1cmx9YCArICh0aXRsZSA/ICcvJnN1bW1hcnk9JyArIHRpdGxlIDogJycpO1xuXG4gICAgY2FzZSBQcm92aWRlcnMudmtvbnRha3RlOlxuICAgICAgcmV0dXJuIGAke1Byb2ZpbGVyVXJscy52a29udGFrdGV9P3VybD0ke3VybH1gICsgKHRpdGxlID8gYCZ0aXRsZT0ke3RpdGxlfWAgOiAnJyk7XG5cbiAgICBjYXNlIFByb3ZpZGVycy50ZWxlZ3JhbTpcbiAgICAgIHJldHVybiBgJHtQcm9maWxlclVybHMudGVsZWdyYW19P3VybD0ke3VybH1gICsgKHRpdGxlID8gYCZ0ZXh0PSR7dGl0bGV9YCA6ICcnKTtcblxuICAgIGNhc2UgUHJvdmlkZXJzLmdldHBvY2tldDpcbiAgICAgIHJldHVybiBgJHtQcm9maWxlclVybHMuZ2V0cG9ja2V0fT91cmw9JHt1cmx9YCArICh0aXRsZSA/IGAmdGl0bGU9JHt0aXRsZX1gIDogJycpO1xuXG4gICAgY2FzZSBQcm92aWRlcnMucmVkZGl0OlxuICAgICAgcmV0dXJuIGAke1Byb2ZpbGVyVXJscy5yZWRkaXR9P3VybD0ke3VybH1gO1xuXG4gICAgY2FzZSBQcm92aWRlcnMuZXZlcm5vdGU6XG4gICAgICByZXR1cm4gYCR7UHJvZmlsZXJVcmxzLmV2ZXJub3RlfT91cmw9JHt1cmx9YCArICh0aXRsZSA/IGAmdD0ke3RpdGxlfWAgOiAnJyk7XG5cbiAgICBjYXNlIFByb3ZpZGVycy5waW50ZXJlc3Q6XG4gICAgICByZXR1cm4gYCR7UHJvZmlsZXJVcmxzLnBpbnRlcmVzdH0/dXJsPSR7dXJsfSZtZWRpYT0ke3VybH1gICtcbiAgICAgICAgKHRpdGxlID8gYCZkZXNjcmlwdGlvbj0ke3RpdGxlfWAgOiAnJyk7XG5cbiAgICBjYXNlIFByb3ZpZGVycy5za3lwZTpcbiAgICAgIHJldHVybiBgJHtQcm9maWxlclVybHMuc2t5cGV9P3VybD0ke3VybH0mc291cmNlPWJ1dHRvbmAgKyAodGl0bGUgPyBgJnRleHQ9JHt0aXRsZX1gIDogJycpO1xuXG4gICAgY2FzZSBQcm92aWRlcnMud2hhdHNhcHA6XG4gICAgICByZXR1cm4gYCR7UHJvZmlsZXJVcmxzLndoYXRzYXBwfT90ZXh0PSR7dXJsfWAgKyBlbmNvZGVVUklDb21wb25lbnQoJyAnKSArICh0aXRsZSB8fCAnJyk7XG5cbiAgICBjYXNlIFByb3ZpZGVycy5jb25uZWN0T2s6XG4gICAgICBjb25zdCBzaGFyZVVybFBhcmFtID0gJ3N0LmNtZD1XaWRnZXRTaGFyZVByZXZpZXcmc2VydmljZT1vZG5va2xhc3NuaWtpJnN0LnNoYXJlVXJsJztcblxuICAgICAgcmV0dXJuIGAke1Byb2ZpbGVyVXJscy5jb25uZWN0T2t9PyR7c2hhcmVVcmxQYXJhbX09JHt1cmx9YDtcblxuICAgIGNhc2UgUHJvdmlkZXJzLnhpbmc6XG4gICAgICByZXR1cm4gYCR7UHJvZmlsZXJVcmxzLnhpbmd9P29wPXNoYXJlO3VybD0ke3VybH1gICsgKHRpdGxlID8gYDt0aXRsZT0ke3RpdGxlfWAgOiAnJyk7XG5cbiAgICBjYXNlIFByb3ZpZGVycy5tYWlsdG86XG4gICAgICByZXR1cm4gKFxuICAgICAgICBQcm9maWxlclVybHMubWFpbHRvICtcbiAgICAgICAgKHRpdGxlID8gJz9zdWJqZWN0PScgKyB0aXRsZSA6ICcnKSArXG4gICAgICAgICh0aXRsZSA/ICcmYm9keT0nIDogJz9ib2R5PScpICtcbiAgICAgICAgKGRlc2NyaXB0aW9uID8gZGVzY3JpcHRpb24gOiAnJykgK1xuICAgICAgICAnICcgK1xuICAgICAgICB1cmxcbiAgICAgICk7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIHNvY2lhbCBzaGFyZSBwcm92aWRlcjogJHtwcm92aWRlcn1gKTtcbiAgfVxufVxuIl19