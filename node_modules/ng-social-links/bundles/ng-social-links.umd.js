(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ng-social-links', ['exports', '@angular/core', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['ng-social-links'] = {}, global.ng.core, global.ng.common));
}(this, (function (exports, i0, i1) { 'use strict';

    var DEFAULT_SHARE_URL_CONFIG_TOKEN = new i0.InjectionToken('ng-default-social-share-config');

    var Providers = /** @class */ (function () {
        function Providers() {
        }
        return Providers;
    }());
    Providers.facebook = 'fb';
    Providers.twitter = 'tw';
    Providers.linkedin = 'in';
    Providers.mailto = 'mail';
    Providers.vkontakte = 'vk';
    Providers.telegram = 'tg';
    Providers.getpocket = 'pocket';
    Providers.reddit = 're';
    Providers.evernote = 'ev';
    Providers.pinterest = 'pi';
    Providers.skype = 'sk';
    Providers.whatsapp = 'wa';
    Providers.connectOk = 'ok';
    Providers.xing = 'xi';
    var ProfilerUrls = /** @class */ (function () {
        function ProfilerUrls() {
        }
        return ProfilerUrls;
    }());
    ProfilerUrls.facebook = 'https://www.facebook.com/sharer/sharer.php';
    ProfilerUrls.twitter = 'https://twitter.com/intent/tweet';
    ProfilerUrls.linkedin = 'https://www.linkedin.com/sharing/share-offsite/';
    ProfilerUrls.mailto = 'mailto:';
    ProfilerUrls.vkontakte = 'https://vk.com/share.php';
    ProfilerUrls.telegram = 'https://t.me/share/url';
    ProfilerUrls.getpocket = 'https://getpocket.com/edit';
    ProfilerUrls.reddit = 'https://reddit.com/submit/';
    ProfilerUrls.evernote = 'https://www.evernote.com/clip.action';
    ProfilerUrls.pinterest = 'https://pinterest.com/pin/create/button/';
    ProfilerUrls.skype = 'https://web.skype.com/share';
    ProfilerUrls.whatsapp = 'whatsapp://send';
    ProfilerUrls.connectOk = 'https://connect.ok.ru/dk';
    ProfilerUrls.xing = 'https://www.xing.com/app/user';

    /**
     * Provides social share URL for a given provider.
     * @param provider Provider name.
     * @param config Parameters used to build a social share URL.
     */
    function getShareLink(provider, config) {
        var url = config.url, title = config.title, description = config.description;
        if (!url) {
            throw new Error('Mandatory parameter is missing: url.');
        }
        url = encodeURIComponent(url);
        if (title) {
            title = encodeURIComponent(title);
        }
        if (description) {
            description = encodeURIComponent(description);
        }
        switch (provider) {
            case Providers.facebook:
                return ProfilerUrls.facebook + "?u=" + url;
            case Providers.twitter:
                return ProfilerUrls.twitter + "?url=" + url + (title ? "&text=" + title : '');
            case Providers.linkedin:
                return ProfilerUrls.linkedin + "?url=" + url + (title ? '/&summary=' + title : '');
            case Providers.vkontakte:
                return ProfilerUrls.vkontakte + "?url=" + url + (title ? "&title=" + title : '');
            case Providers.telegram:
                return ProfilerUrls.telegram + "?url=" + url + (title ? "&text=" + title : '');
            case Providers.getpocket:
                return ProfilerUrls.getpocket + "?url=" + url + (title ? "&title=" + title : '');
            case Providers.reddit:
                return ProfilerUrls.reddit + "?url=" + url;
            case Providers.evernote:
                return ProfilerUrls.evernote + "?url=" + url + (title ? "&t=" + title : '');
            case Providers.pinterest:
                return ProfilerUrls.pinterest + "?url=" + url + "&media=" + url +
                    (title ? "&description=" + title : '');
            case Providers.skype:
                return ProfilerUrls.skype + "?url=" + url + "&source=button" + (title ? "&text=" + title : '');
            case Providers.whatsapp:
                return ProfilerUrls.whatsapp + "?text=" + url + encodeURIComponent(' ') + (title || '');
            case Providers.connectOk:
                var shareUrlParam = 'st.cmd=WidgetSharePreview&service=odnoklassniki&st.shareUrl';
                return ProfilerUrls.connectOk + "?" + shareUrlParam + "=" + url;
            case Providers.xing:
                return ProfilerUrls.xing + "?op=share;url=" + url + (title ? ";title=" + title : '');
            case Providers.mailto:
                return (ProfilerUrls.mailto +
                    (title ? '?subject=' + title : '') +
                    (title ? '&body=' : '?body=') +
                    (description ? description : '') +
                    ' ' +
                    url);
            default:
                throw new Error("Unknown social share provider: " + provider);
        }
    }

    var NgSocialLinksService = /** @class */ (function () {
        function NgSocialLinksService(document, defaultConfig) {
            this.document = document;
            this.defaultConfig = defaultConfig;
        }
        NgSocialLinksService.prototype.getShareLink = function (provider, config) {
            var url = (config === null || config === void 0 ? void 0 : config.url) || this.defaultConfig.url || this.document.location.origin;
            var title = (config === null || config === void 0 ? void 0 : config.title) || this.defaultConfig.title;
            var description = (config === null || config === void 0 ? void 0 : config.description) || this.defaultConfig.description;
            return getShareLink(provider, { url: url, title: title, description: description });
        };
        return NgSocialLinksService;
    }());
    NgSocialLinksService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgSocialLinksService_Factory() { return new NgSocialLinksService(i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(DEFAULT_SHARE_URL_CONFIG_TOKEN)); }, token: NgSocialLinksService, providedIn: "root" });
    NgSocialLinksService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    NgSocialLinksService.ctorParameters = function () { return [
        { type: Document, decorators: [{ type: i0.Inject, args: [i1.DOCUMENT,] }] },
        { type: undefined, decorators: [{ type: i0.Inject, args: [DEFAULT_SHARE_URL_CONFIG_TOKEN,] }] }
    ]; };

    var NgSocialLinksModule = /** @class */ (function () {
        function NgSocialLinksModule() {
        }
        NgSocialLinksModule.forRoot = function (config) {
            return {
                ngModule: NgSocialLinksModule,
                providers: [
                    NgSocialLinksService,
                    { provide: DEFAULT_SHARE_URL_CONFIG_TOKEN, useValue: config || {} }
                ]
            };
        };
        return NgSocialLinksModule;
    }());
    NgSocialLinksModule.decorators = [
        { type: i0.NgModule }
    ];

    /*
     * Public API Surface of ng-social-links
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.NgSocialLinksModule = NgSocialLinksModule;
    exports.NgSocialLinksService = NgSocialLinksService;
    exports.ɵa = DEFAULT_SHARE_URL_CONFIG_TOKEN;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ng-social-links.umd.js.map
